// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Data;

#nullable disable

namespace TaskManager.Migrations
{
    [DbContext(typeof(TaskManagerDbContext))]
    [Migration("20231025123440_UpdateColumns")]
    partial class UpdateColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonModelProjectModel", b =>
                {
                    b.Property<int>("PersonProjectsProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProgectPersonPersonId")
                        .HasColumnType("int");

                    b.HasKey("PersonProjectsProjectId", "ProgectPersonPersonId");

                    b.HasIndex("ProgectPersonPersonId");

                    b.ToTable("PersonModelProjectModel");
                });

            modelBuilder.Entity("TaskManager.Models.KategoriModel", b =>
                {
                    b.Property<int>("KategoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriId"));

                    b.Property<string>("KategoriName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KategoriProjectProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Projectid")
                        .HasColumnType("int");

                    b.HasKey("KategoriId");

                    b.HasIndex("KategoriProjectProjectId");

                    b.ToTable("KategoriDb");
                });

            modelBuilder.Entity("TaskManager.Models.PersonModel", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("PersonMailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("PersonDb");
                });

            modelBuilder.Entity("TaskManager.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("ProjectDb");
                });

            modelBuilder.Entity("TaskManager.Models.TaskModel", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.Property<int>("TackKategoriKategoriId")
                        .HasColumnType("int");

                    b.Property<string>("TaskDeadline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskImportance")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.HasIndex("TackKategoriKategoriId");

                    b.ToTable("TaskDb");
                });

            modelBuilder.Entity("PersonModelProjectModel", b =>
                {
                    b.HasOne("TaskManager.Models.ProjectModel", null)
                        .WithMany()
                        .HasForeignKey("PersonProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Models.PersonModel", null)
                        .WithMany()
                        .HasForeignKey("ProgectPersonPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Models.KategoriModel", b =>
                {
                    b.HasOne("TaskManager.Models.ProjectModel", "KategoriProject")
                        .WithMany("ProjectKategories")
                        .HasForeignKey("KategoriProjectProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KategoriProject");
                });

            modelBuilder.Entity("TaskManager.Models.TaskModel", b =>
                {
                    b.HasOne("TaskManager.Models.KategoriModel", "TackKategori")
                        .WithMany("KategoriTasks")
                        .HasForeignKey("TackKategoriKategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TackKategori");
                });

            modelBuilder.Entity("TaskManager.Models.KategoriModel", b =>
                {
                    b.Navigation("KategoriTasks");
                });

            modelBuilder.Entity("TaskManager.Models.ProjectModel", b =>
                {
                    b.Navigation("ProjectKategories");
                });
#pragma warning restore 612, 618
        }
    }
}
